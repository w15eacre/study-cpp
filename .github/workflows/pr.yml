# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: PR

on:
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CMAKE_GENERATOR: Ninja

  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_COMPRESS: "1"
  CCACHE_MAXSIZE: 2G
  CCACHE_NOHASHDIR: "1"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [clang]
        arch: [x86_64]

    steps:
    - uses: actions/checkout@v4

    # ---------------- Conan cache ----------------
    - name: Cache Conan (v2)
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: conan2-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}-${{ env.BUILD_TYPE }}-${{ hashFiles('conanfile.*', 'CMakeLists.txt', 'profiles/**') }}
        restore-keys: |
          conan2-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}-

    - name: Install compilers
      run: |
        sudo apt-get update -y
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 20 all
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-20 200
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-20 200
        sudo update-alternatives --set clang /usr/bin/clang-20
        sudo update-alternatives --set clang++ /usr/bin/clang++-20

    - name: Install Conan
      run: pipx install conan

    - name: Install dependencies
      run: conan install . --profile:build=${{github.workspace}}/profiles/${{ matrix.compiler }}_${{ matrix.arch }} --profile:host=${{github.workspace}}/profiles/${{ matrix.compiler }}_${{ matrix.arch }} --output-folder=${{github.workspace}}/build --build=missing -s build_type=${{env.BUILD_TYPE}}

    - name: Install ccache
      run: |
        sudo apt-get install -y ccache
        mkdir -p "$CCACHE_DIR"
        ccache -M "$CCACHE_MAXSIZE" || true

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }} 
        key: ccache-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}-${{ env.BUILD_TYPE }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}-${{ env.BUILD_TYPE }}-

    - name: Normalize build type to lowercase
      id: vars
      run: |
        echo "build_type_lc=${BUILD_TYPE,,}" >> $GITHUB_OUTPUT

    - name: Configure CMake
      # Build your program with the given configuration
      run: |
        source ${{github.workspace}}/build/conanbuildenv-${{ steps.vars.outputs.build_type_lc }}-${{ matrix.arch }}.sh 
        cmake -B ${{github.workspace}}/build -G ${{env.CMAKE_GENERATOR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/build/conan_toolchain.cmake

    - name: Build all targets
      # Build your program with the given configuration
      run: |
        source ${{github.workspace}}/build/conanbuildenv-${{ steps.vars.outputs.build_type_lc }}-${{ matrix.arch }}.sh 
        cmake --build ${{github.workspace}}/build --parallel $(nproc) --target all

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        source ${{github.workspace}}/build/conanbuildenv-${{ steps.vars.outputs.build_type_lc }}-${{ matrix.arch }}.sh 
        ctest -R ^gtest_.*_test$ --output-on-failure --timeout 60

